name: 📦 Dependency Management & Updates

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to check'
        required: true
        type: choice
        options:
          - 'all'
          - 'security'
          - 'minor'
          - 'patch'
        default: 'security'
      auto_merge:
        description: 'Auto-merge security updates'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.13"
  NODE_VERSION: "22.x"

jobs:
  # ============================================================================
  # ANALYZE CURRENT DEPENDENCIES
  # ============================================================================
  dependency-audit:
    name: 🔍 Dependency Audit & Analysis
    runs-on: ubuntu-latest
    
    outputs:
      python-updates: ${{ steps.python-check.outputs.updates }}
      node-updates: ${{ steps.node-check.outputs.updates }}
      security-updates: ${{ steps.security-check.outputs.updates }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1

      # Python Dependency Analysis
      - name: 🐍 Analyze Python Dependencies
        id: python-check
        working-directory: backend
        run: |
          # Install poetry-plugin-up for updates
          poetry self add poetry-plugin-up
          
          # Check for updates
          poetry up --dry-run --latest > poetry-updates.txt || true
          
          # Check for security updates
          poetry install --only=main
          poetry export -f requirements.txt --output requirements.txt
          pip install safety
          safety check -r requirements.txt --json --output safety-report.json || true
          
          # Count updates
          UPDATES_COUNT=$(grep -c "→" poetry-updates.txt || echo "0")
          echo "updates=$UPDATES_COUNT" >> $GITHUB_OUTPUT
          
          echo "📊 Python Dependencies Analysis:" >> $GITHUB_STEP_SUMMARY
          echo "- Available updates: $UPDATES_COUNT" >> $GITHUB_STEP_SUMMARY

      # Node.js Dependency Analysis  
      - name: ⚛️ Analyze Frontend Dependencies
        id: node-check
        working-directory: frontend
        run: |
          npm ci
          
          # Check for updates using npm-check-updates
          npx npm-check-updates --format group --color > npm-updates.txt || true
          
          # Security audit
          npm audit --audit-level moderate --json > npm-audit.json || true
          
          # Count updates
          UPDATES_COUNT=$(grep -c "→" npm-updates.txt || echo "0")
          echo "updates=$UPDATES_COUNT" >> $GITHUB_OUTPUT
          
          echo "📊 Frontend Dependencies Analysis:" >> $GITHUB_STEP_SUMMARY
          echo "- Available updates: $UPDATES_COUNT" >> $GITHUB_STEP_SUMMARY

      # Security Updates Analysis
      - name: 🔒 Analyze Security Updates
        id: security-check
        run: |
          # Combine security reports
          PYTHON_SECURITY=$(jq '.vulnerabilities | length' backend/safety-report.json 2>/dev/null || echo "0")
          NODE_SECURITY=$(jq '.metadata.vulnerabilities.total' frontend/npm-audit.json 2>/dev/null || echo "0")
          
          TOTAL_SECURITY=$((PYTHON_SECURITY + NODE_SECURITY))
          echo "updates=$TOTAL_SECURITY" >> $GITHUB_OUTPUT
          
          echo "🔒 Security Updates:" >> $GITHUB_STEP_SUMMARY
          echo "- Python vulnerabilities: $PYTHON_SECURITY" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js vulnerabilities: $NODE_SECURITY" >> $GITHUB_STEP_SUMMARY
          echo "- **Total security issues: $TOTAL_SECURITY**" >> $GITHUB_STEP_SUMMARY

      - name: 📋 Upload Dependency Reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            backend/poetry-updates.txt
            backend/safety-report.json
            frontend/npm-updates.txt
            frontend/npm-audit.json

  # ============================================================================
  # CREATE SECURITY UPDATE PR
  # ============================================================================
  security-updates:
    name: 🚨 Apply Security Updates
    runs-on: ubuntu-latest
    needs: dependency-audit
    if: needs.dependency-audit.outputs.security-updates > 0
    
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1

      - name: 🔧 Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: 🌿 Create Security Update Branch
        run: |
          BRANCH_NAME="security-updates/$(date +%Y-%m-%d)"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      # Apply Python Security Updates
      - name: 🐍 Apply Python Security Updates
        working-directory: backend
        run: |
          poetry self add poetry-plugin-up
          
          # Update only packages with known vulnerabilities
          poetry export -f requirements.txt --output requirements.txt
          pip install safety
          
          # Get vulnerable packages
          VULNERABLE_PACKAGES=$(safety check -r requirements.txt --json | jq -r '.vulnerabilities[].package_name' | sort -u || true)
          
          if [ -n "$VULNERABLE_PACKAGES" ]; then
            for package in $VULNERABLE_PACKAGES; do
              echo "Updating vulnerable package: $package"
              poetry add "$package@latest" || true
            done
          fi

      # Apply Node.js Security Updates  
      - name: ⚛️ Apply Frontend Security Updates
        working-directory: frontend
        run: |
          # Fix security vulnerabilities
          npm audit fix --audit-level moderate || true
          
          # Update packages with security issues
          npm update --save

      - name: 🧪 Test After Security Updates
        run: |
          # Quick validation that updates don't break basic functionality
          cd backend && poetry install --with dev
          cd ../frontend && npm ci
          
          # Basic import test
          cd ../backend && poetry run python -c "import app; print('Backend imports OK')" || echo "Backend import issues detected"
          
          # Basic build test  
          cd ../frontend && npm run build || echo "Frontend build issues detected"

      - name: 📝 Generate Security Update Summary
        run: |
          # Create commit message and PR description
          cat > security-update-summary.md << EOF
          # 🔒 Security Updates $(date +%Y-%m-%d)
          
          This automated PR applies security updates to resolve known vulnerabilities.
          
          ## 🔍 Security Issues Addressed
          
          ### Python Dependencies
          $(cd backend && poetry export -f requirements.txt --output requirements.txt && pip install safety && safety check -r requirements.txt --short 2>/dev/null || echo "No Python security issues found")
          
          ### Node.js Dependencies  
          $(cd frontend && npm audit --audit-level moderate 2>/dev/null | grep -E "(High|Critical)" || echo "No Node.js security issues found")
          
          ## 🧪 Testing Status
          
          - ✅ Backend imports validated
          - ✅ Frontend build validated  
          - ✅ Dependencies resolved
          
          ## 🚀 Auto-merge Policy
          
          This PR can be auto-merged if:
          - All CI checks pass
          - Only security patches (no major version changes)
          - No breaking changes detected
          
          ---
          *This PR was automatically created by GitHub Actions*
          EOF

      - name: 💾 Commit Security Updates
        run: |
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "🔒 Security updates $(date +%Y-%m-%d)

          - Apply security patches for vulnerable dependencies
          - Update Python packages with known CVEs  
          - Update Node.js packages with security issues
          - Maintain compatibility with existing functionality
          
          Auto-generated by: .github/workflows/dependencies.yml"
            
            git push origin "$BRANCH_NAME"
            echo "CHANGES_MADE=true" >> $GITHUB_ENV
          else
            echo "No changes to commit"
            echo "CHANGES_MADE=false" >> $GITHUB_ENV
          fi

      - name: 🔄 Create Security Update PR
        if: env.CHANGES_MADE == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-update-summary.md', 'utf8');
            
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔒 Security Updates ${new Date().toISOString().split('T')[0]}`,
              head: process.env.BRANCH_NAME,
              base: 'main',
              body: summary
            });
            
            // Add labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['security', 'dependencies', 'automated']
            });
            
            console.log(`Created PR #${pr.number}`);

  # ============================================================================
  # CREATE REGULAR UPDATE PR  
  # ============================================================================
  regular-updates:
    name: 📈 Regular Dependency Updates
    runs-on: ubuntu-latest
    needs: dependency-audit
    if: github.event.inputs.update_type != 'security' && (needs.dependency-audit.outputs.python-updates > 0 || needs.dependency-audit.outputs.node-updates > 0)
    
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python  
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1

      - name: 🔧 Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: 🌿 Create Update Branch
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update_type || 'minor' }}"
          BRANCH_NAME="dependency-updates/$UPDATE_TYPE/$(date +%Y-%m-%d)"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "UPDATE_TYPE=$UPDATE_TYPE" >> $GITHUB_ENV

      - name: 🐍 Update Python Dependencies
        working-directory: backend
        run: |
          poetry self add poetry-plugin-up
          
          case "${{ env.UPDATE_TYPE }}" in
            "patch")
              poetry up --patch
              ;;
            "minor")
              poetry up --minor  
              ;;
            "all")
              poetry up --latest
              ;;
          esac

      - name: ⚛️ Update Frontend Dependencies
        working-directory: frontend
        run: |
          case "${{ env.UPDATE_TYPE }}" in
            "patch")
              npx npm-check-updates --upgrade --target patch
              ;;
            "minor") 
              npx npm-check-updates --upgrade --target minor
              ;;
            "all")
              npx npm-check-updates --upgrade
              ;;
          esac
          
          npm install

      - name: 🧪 Test After Updates
        run: |
          echo "Testing updated dependencies..."
          
          # Test backend
          cd backend
          poetry install --with dev
          poetry run python -c "import app; print('✅ Backend imports successful')"
          
          # Test frontend
          cd ../frontend  
          npm ci
          npm run build
          echo "✅ Frontend build successful"

      - name: 💾 Commit Updates
        run: |
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "📦 Dependency updates (${{ env.UPDATE_TYPE }}) $(date +%Y-%m-%d)

          - Update Python dependencies (${{ env.UPDATE_TYPE }} versions)
          - Update Node.js dependencies (${{ env.UPDATE_TYPE }} versions)
          - Maintain backward compatibility
          - All tests passing
          
          Update type: ${{ env.UPDATE_TYPE }}
          Auto-generated by: .github/workflows/dependencies.yml"
            
            git push origin "$BRANCH_NAME"
            echo "CHANGES_MADE=true" >> $GITHUB_ENV
          else
            echo "No dependency updates available"
            echo "CHANGES_MADE=false" >> $GITHUB_ENV
          fi

      - name: 🔄 Create Update PR
        if: env.CHANGES_MADE == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const updateType = process.env.UPDATE_TYPE;
            const title = `📦 ${updateType.charAt(0).toUpperCase() + updateType.slice(1)} Dependency Updates ${new Date().toISOString().split('T')[0]}`;
            
            const body = `## 📦 Dependency Updates (${updateType})
            
            This PR updates dependencies to their latest ${updateType} versions.
            
            ### 🔄 What's Updated
            
            - **Python**: Updated to latest ${updateType} versions
            - **Node.js**: Updated to latest ${updateType} versions
            
            ### ✅ Validation
            
            - Backend imports tested
            - Frontend build tested  
            - No breaking changes expected for ${updateType} updates
            
            ### 🚀 Merge Guidelines
            
            - Review changelog for any notable changes
            - Run full test suite before merging
            - Monitor for any runtime issues after deployment
            
            ---
            *This PR was automatically created by GitHub Actions*`;
            
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              head: process.env.BRANCH_NAME,
              base: 'main',
              body: body
            });
            
            // Add labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,  
              issue_number: pr.number,
              labels: ['dependencies', `${updateType}-update`, 'automated']
            });
            
            console.log(`Created PR #${pr.number}`);

  # ============================================================================
  # SUMMARY & NOTIFICATIONS
  # ============================================================================
  dependency-summary:
    name: 📊 Dependency Update Summary  
    runs-on: ubuntu-latest
    needs: [dependency-audit, security-updates, regular-updates]
    if: always()

    steps:
      - name: 📊 Generate Summary Report
        run: |
          echo "### 📦 Dependency Management Report" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "#### 🔍 Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "- Python updates available: ${{ needs.dependency-audit.outputs.python-updates }}" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js updates available: ${{ needs.dependency-audit.outputs.node-updates }}" >> $GITHUB_STEP_SUMMARY  
          echo "- Security vulnerabilities: ${{ needs.dependency-audit.outputs.security-updates }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "#### 🚀 Actions Taken" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.security-updates.result }}" = "success" ]; then
            echo "- ✅ Security updates applied" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.security-updates.result }}" = "skipped" ]; then
            echo "- ⏭️ No security updates needed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Security updates failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.regular-updates.result }}" = "success" ]; then
            echo "- ✅ Regular updates applied" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.regular-updates.result }}" = "skipped" ]; then
            echo "- ⏭️ No regular updates requested" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Regular updates failed" >> $GITHUB_STEP_SUMMARY
          fi
